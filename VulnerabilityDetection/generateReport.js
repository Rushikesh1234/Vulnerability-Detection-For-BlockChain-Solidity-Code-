var fs = require('fs')
var PDFDocument = require('pdfkit')
const chalk = require('chalk')

module.exports = {

    printLinesToPDF: (totalInstance, printConsoleData) => {
        try{
            var dateObj = Date.now()
            var dt = new Date(dateObj)
            var date = dt.getDate()
            var month = dt.getMonth() + 1
            var year = dt.getFullYear()

            currentDate = year + '-' + month + '-' + date
            currentTime = Math.floor(dateObj/1000)
            currentDateTime = currentDate+'_'+currentTime

            var pdf = new PDFDocument
            pdf.pipe(fs.createWriteStream('Report_' + currentDateTime + '.pdf'));

            pdf.font('Times-Roman').fontSize('25').text("Vulnerability Detection Tool", {
                align: 'center',
                underline: true
            })
            pdf.font('Times-Roman').fontSize('20').text("Report", {
                align: 'center'
            })
            pdf.font('Times-Roman').fontSize('12').text(currentDate, {
                align: 'center'
            })
            pdf.fillColor('black').font('Times-Roman').fontSize('12').text('----------------------------------------------------------------------------------------------------------------',{
                align: 'left'
            })
            pdf.fillColor('black').font('Times-Roman').fontSize('12').text('\n',{
                align: 'left'
            })
            for (var i = 0; i < printConsoleData.length; i++) {
                pdf.fillColor('green').font('Times-Roman').fontSize('14').text(printConsoleData[i].VulnerabilityName,{
                    align: 'left',
                    underline: true
                })

                if (printConsoleData[i].SeverityLevel == 'HIGH') {
                    pdf.fillColor('red').font('Times-Roman').fontSize('12').text('Severity Level - ' + printConsoleData[i].SeverityLevel,{
                        align: 'left'
                    })
                } else if (printConsoleData[i].SeverityLevel == 'MEDIUM') {
                    pdf.fillColor('yellow').font('Times-Roman').fontSize('12').text('Severity Level - ' + printConsoleData[i].SeverityLevel,{
                        align: 'left'
                    })
                } else {
                    pdf.fillColor('green').font('Times-Roman').fontSize('12').text('Severity Level - ' + printConsoleData[i].SeverityLevel,{
                        align: 'left'
                    })
                }

                pdf.fillColor('black').font('Times-Roman').fontSize('12').text('Found Instance - ' +printConsoleData[i].FoundInstance,{
                    align: 'left'
                })

                pdf.fillColor('blue').font('Times-Roman').fontSize('12').text(JSON.stringify(printConsoleData[i].VulnerabilityDetails, null, 0),{
                    align: 'left'
                })

                pdf.fillColor('magenta').font('Times-Roman').fontSize('12').text('Suggestion to fix vulnerability -',{
                    align: 'left'
                })
                pdf.fillColor('magenta').font('Times-Roman').fontSize('12').text(printConsoleData[i].SuggestedMitigation,{
                    align: 'left'
                })

                pdf.fillColor('black').font('Times-Roman').fontSize('12').text('----------------------------------------------------------------------------------------------------------------',{
                    align: 'left'
                })
                pdf.fillColor('black').font('Times-Roman').fontSize('12').text('\n',{
                    align: 'left'
                })
            }
            console.log(chalk.green('\nFile is successfully downloaded in system. Thanks for using our tool for validating solidity file.'))
            pdf.end()
        } catch(err) {
            console.log(chalk.red(err))
        }
    }
}